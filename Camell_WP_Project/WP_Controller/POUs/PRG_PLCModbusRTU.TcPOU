<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_PLCModbusRTU" Id="{81d112d8-0152-408a-8ebf-7d6260d05547}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_PLCModbusRTU
VAR
	bActivatePlcModbusWriteReg AT %I*: BOOL;
	bDeactivatePlcModbusWriteReg AT %I*: BOOL;
	bActiveState : BOOL;
	
	fbStrAscConversion: FB_StrASCConversion;
	fbModbusMaster: ModbusRtuMasterV2_KL6x22B;
	sWriteErrorId: MODBUS_ERRORS;
	bBusyState: BOOL := FALSE;
	
	fbRTrigClockPulse: R_TRIG;
	fbRTrigExecuteFirstReg: R_TRIG;
	fbClockPulse: FB_ClockPulse;
	nCount : INT;  // Send particular register decision
	nCountPulse : INT;
	// Modbus properties
	mB_unitId: BYTE:= 10;
	mB_quantity_coils: WORD:=2;
	mB_quantity_regs: WORD:=10;
	mB_addr_bits: WORD:=00;
	
	mB_addr_1st10regs: WORD:=40;
	mB_addr_2nd10regs: WORD:=50;

	
	// Holding register declaration
	aWriteValueRegs0: ARRAY[0..19] OF WORD;
	aValue1st10Regs: ARRAY[0..9] OF WORD;
	aValue2nd10Regs: ARRAY[0..9] OF WORD;
	i : INT;
	bWrite: BOOL:=FALSE;
	bTurnOnPulse:BOOL:=FALSE;
	// Compressed form of coil registers
	wWriteValueBits: WORD; //BIT0|BIT1|XXXXXXXXX
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Divide the array into two arrays
FOR i := 0 TO 19 DO
    IF i <= 9 THEN
        aValue1st10Regs[i] := aWriteValueRegs0[i];
    ELSE
        aValue2nd10Regs[i - 10] := aWriteValueRegs0[i];
    END_IF;
END_FOR;

// Convert STRING to ARRAY OF BYTE in ASCII TYPE
fbStrAscConversion(sText:=GVL.sInputFromHMI,aASCIIRes => aWriteValueRegs0);

// Detect /deactivate state for function 
IF 	bActivatePlcModbusWriteReg AND NOT bDeactivatePlcModbusWriteReg THEN
	bActiveState:=TRUE;
ELSIF 	bDeactivatePlcModbusWriteReg AND NOT bActivatePlcModbusWriteReg THEN
	bActiveState:=FALSE;
ELSE
	bActiveState:=FALSE;
END_IF

IF bActiveState THEN
	A_WriteRegs();	
END_IF

A_WriteCoils();]]></ST>
    </Implementation>
    <Action Name="A_WriteCoils" Id="{14d2f459-1a38-44ce-9670-d6112c8a11f9}">
      <Implementation>
        <ST><![CDATA[// ------Write coils-------
// Convert Bit 0 and Bit 1 to WORD
IF GVL.bModbusCoilBit0 THEN
	IF GVL.bModbusCoilBit1 THEN
		wWriteValueBits := 3;
	ELSE
		wWriteValueBits := 1;
	END_IF
ELSE
	IF GVL.bModbusCoilBit1 THEN
		wWriteValueBits := 2;
	ELSE
		wWriteValueBits := 0;
	END_IF
END_IF


fbModbusMaster.WriteMultipleCoils(
	UnitID:= mB_unitId, 
	Quantity:= mB_quantity_coils, 
	MBAddr:= mB_addr_bits, 
	cbLength:= SIZEOF(wWriteValueBits), 
	pMemoryAddr:= ADR(wWriteValueBits), 
	Execute:= GVL.bExecuteWriteCoils, 
	Timeout:= T#1000MS, 
	BUSY=> bBusyState, 
	Error=> , 
	ErrorId=> sWriteErrorId, 
	cbRead=>
);]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_WriteRegs" Id="{78dc695e-3384-49ed-9c44-571c14816ed2}">
      <Implementation>
        <ST><![CDATA[//-----Write registers-------
//==> Divide into 2 arrays[0..9] due to unstable sending sequences when try to push 20 registers subsequently

	// Trigger for SEND button and clock pulse
fbRTrigExecuteFirstReg(CLK:= GVL.bExecuteWriteRegs0, Q =>);
fbRTrigClockPulse(CLK:= fbClockPulse.bExecuteClock, Q=>);

IF fbRTrigExecuteFirstReg.Q THEN
		bWrite := TRUE;
END_IF

IF bWrite THEN
	bTurnOnPulse:=TRUE;
END_IF

// Activate clockpulse
fbClockPulse(bStart:= bTurnOnPulse,delON:= T#1600MS, bExecuteClock => );

IF nCount = 0  AND bWrite = TRUE THEN
//Write first 10 regs
	fbModbusMaster.WriteRegs(
		UnitID:= mB_unitId,
		Quantity:= mB_quantity_regs, 
		MBAddr:= mB_addr_1st10regs, 
		cbLength:= SIZEOF(aValue1st10Regs), 
		pMemoryAddr:= ADR(aValue1st10Regs), 
		Execute:= fbClockPulse.bExecuteClock, 
		Timeout:= T#1500MS, 
		BUSY=> bBusyState, 
		Error=> , 
		ErrorId=> sWriteErrorId, 
		cbRead=>
	);
	IF nCountPulse >= 1 THEN
		nCount:=1;
	ELSE
		IF fbRTrigClockPulse.Q THEN
			nCountPulse:= nCountPulse+1;
		END_IF
	END_IF
ELSIF nCount = 1 AND bWrite = TRUE THEN
// Write second 10 regs
	fbModbusMaster.WriteRegs(
		UnitID:= mB_unitId,
		Quantity:= mB_quantity_regs, 
		MBAddr:= mB_addr_2nd10regs, 
		cbLength:= SIZEOF(aValue2nd10Regs), 
		pMemoryAddr:= ADR(aValue2nd10Regs), 
		Execute:= fbClockPulse.bExecuteClock, 
		Timeout:= T#1500MS, 
		BUSY=> bBusyState, 
		Error=> , 
		ErrorId=> sWriteErrorId, 
		cbRead=>
	);
	IF nCountPulse = 2 THEN
		bTurnOnPulse:=FALSE;
	ELSIF nCountPulse >=3 AND bBusyState =FALSE THEN // Wait until FB fishishes its functiong, avoid being suspended at busy state
		nCount:=0;
		nCountPulse:=0;
		bWrite:=FALSE;
		bTurnOnPulse:=FALSE;
	END_IF
	
	IF fbRTrigClockPulse.Q THEN
		nCountPulse:= nCountPulse+1;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_BoolWordConversion" Id="{dc064289-8b52-4625-96d0-b796ff4b46dc}">
      <Declaration><![CDATA[METHOD M_BoolWordConversion : WORD
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PRG_PLCModbusRTU">
      <LineId Id="429" Count="7" />
      <LineId Id="396" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="550" Count="3" />
      <LineId Id="556" Count="3" />
      <LineId Id="426" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="544" Count="1" />
      <LineId Id="540" Count="0" />
      <LineId Id="539" Count="0" />
    </LineIds>
    <LineIds Name="PRG_PLCModbusRTU.A_WriteCoils">
      <LineId Id="2" Count="28" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PRG_PLCModbusRTU.A_WriteRegs">
      <LineId Id="2" Count="66" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PRG_PLCModbusRTU.M_BoolWordConversion">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>