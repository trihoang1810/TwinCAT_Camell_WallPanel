<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="VISION" Id="{c83acc5f-4ec8-4485-ad39-a0115207ba4b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM VISION
VAR
	hr					: HRESULT;
	bActivateVisionAcqu AT %I*: BOOL;
	bDeactivateVisionAcqu AT %I*: BOOL;
	bActiveState : BOOL;
	fbControl			: FB_VN_SimpleCameraControl;
	eState				: ETcVnCameraState;
	
	// Image
	ipImage				: ITcVnImage;
	ipImageWork			: ITcVnImage;
	ipImageResult		: ITcVnImage;
	
	// displayable Image
	ipImageDispl		: ITcVnDisplayableImage;
	ipImageWorkDispl	: ITcVnDisplayableImage;
	ipImageResultDispl	: ITcVnDisplayableImage;
//											[R , G , B , L]
	aLowerBounds		: TcVnVector4_LREAL :=[30,45,90,0];
	aUpperBounds		: TcVnVector4_LREAL :=[50,80,255,0];
	
	ipContours			: ITcVnContainer;
	nNumberofElements	: ULINT;
	
	aColorRed			: TcVnVector4_LREAL :=[255,0,0,0];
	aColorGreen			: TcVnVector4_LREAL :=[0,255,0,0];
	
	ipIterator			: ITcVnForwardIterator;
	ipContoursSingle	: ITcVnContainer;
	fArea				: LREAL;
	
	aCenterOfMass		: TcVnPoint2_LREAL;
	stRectangle			: TcVnRotatedRectangle;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Detect activate/deactivate state for function 
IF 	bActivateVisionAcqu AND NOT bDeactivateVisionAcqu THEN
	bActiveState:=TRUE;
ELSIF
	bDeactivateVisionAcqu AND NOT bActivateVisionAcqu THEN
	bActiveState:=FALSE;
END_IF

eState := fbControl.GetState();

CASE eState OF
	TCVN_CS_INITIAL, 			(* The camera controller is in the initial state and ready to establish the connection to the camera. *)
	TCVN_CS_INITIALIZING, 		(* The camera controller is initializing the camera. *)
	TCVN_CS_INITIALIZED, 		(* The camera controller has initialized the camera. *)
	TCVN_CS_OPENING, 			(* The camera controller is establishing the connection to the camera. *)
	TCVN_CS_OPENED, 			(* The connection to the camera has been established and the camera controller is ready to start the image acquisition. *)
	TCVN_CS_STARTACQUISITION: 	(* The camera controller is starting the image acquisition. *)
	
		hr := fbControl.StartAcquisition();
	
	TCVN_CS_ACQUIRING: 			(* The camera is sending images (either streaming or manually triggered, depending on the configuration). *)
		IF bActiveState THEN
			hr := fbControl.GetCurrentImage(ipImage);
		END_IF
		IF SUCCEEDED(hr) THEN
			
			// debug *
			hr := F_VN_CopyIntoDisplayableImage(ipSrcImage:= ipImage, ipDestImage:= ipImageDispl, hrPrev:= hr) ; 
			
			// convert color space
			hr := F_VN_ConvertColorSpace(ipSrcImage:= ipImage, 
										ipDestImage:= ipImageWork, 
										eTransform:= ETcVnColorSpaceTransform.TCVN_CST_BAYER_RG_TO_RGB, 
										hrPrev:= hr);
										
			//// copyImage
			hr := F_VN_CopyImage(ipImageWork,ipImageResult,hr);
										
			// Debug **
			//hr := F_VN_CopyIntoDisplayableImage(ipSrcImage:= ipImageWork, ipDestImage:= ipImageWorkDispl, hrPrev:= hr) ;
			
			// CheckColorRange
			hr := F_VN_CheckColorRange(
										ipSrcImage:= ipImageWork, 
										ipDestImage:= ipImageWork, 
										aLowerBounds:= aLowerBounds, 
										aUpperBounds:= aUpperBounds, 
										hrPrev:= hr);
			
			// Debug **
			hr := F_VN_CopyIntoDisplayableImage(ipSrcImage:= ipImageWork, ipDestImage:= ipImageWorkDispl, hrPrev:= hr) ;
			
			// FindContours
			hr := F_VN_FindContours(ipSrcImage:= ipImageWork, ipContours:= ipContours, hrPrev:= hr);
			
			//nNumberofElements := ipContours.GetElementNum(); wrong way
			hr := F_VN_GetNumberOfElements(ipContainer:= ipContours, nNumberOfElements:= nNumberofElements, hrPrev:= hr);
	
//////-----------------------------
			// LOOP
			hr := F_VN_GetForwardIterator(ipContainer:= ipContours, ipIterator:= ipIterator, hrPrev:= hr);
			
			WHILE SUCCEEDED(hr) AND_THEN ipIterator.CheckIfEnd() <> S_OK DO
				
				// getContainer
				hr := F_VN_GetContainer(ipIterator:= ipIterator, ipContainer:= ipContoursSingle, hrPrev:= hr);
				hr := F_VN_IncrementIterator(ipIterator,hr); // !!!!!!
				
				//------------------------------------------
				
				hr := F_VN_ContourArea(ipContoursSingle,fArea,hr);
				
				IF fArea > 50_000 AND fArea < 400_000 THEN
					
					//// DrawContours
					hr := F_VN_DrawContours(
										ipContours:= ipContoursSingle, // !!!
										nContourIndex:= -1, 
										ipDestImage:= ipImageResult, 
										aColor:= aColorRed, 
										nThickness:= 5, 
										hrPrev:= hr);
										
//					F_VN_ContourCenterOfMass
					hr := F_VN_ContourCenterOfMass(ipContour:= ipContoursSingle, 
													aCenterOfMass:= aCenterOfMass, 
													hrPrev:= hr);
//					F_VN_DrawPointExp
					hr := F_VN_DrawPointExp(
											nX:= TO_UDINT(aCenterOfMass[0]), 
											nY:= TO_UDINT(aCenterOfMass[1]), 
											ipDestImage:= ipImageResult, 
											eShape:= ETcVnDrawShape.TCVN_DS_X, 
											aColor:= aColorGreen, 
											nSize:= 20, //5
											nThickness:= 5, 
											eLineType:= ETcVnLineType.TCVN_LT_4_CONNECTED, 
											hrPrev:= hr);
//					F_VN_EnclosingRectangle
					hr := F_VN_EnclosingRectangle(ipPointSet:= ipContoursSingle, stRectangle:= stRectangle, hrPrev:= hr);
//					F_VN_DrawRotatedRectangle
					hr := F_VN_DrawRotatedRectangle(
											stRectangle:= stRectangle, 
											ipDestImage:= ipImageResult, 
											aColor:= aColorRed, 
											nThickness:= 5, 
											hrPrev:= hr);
//					F_VN_PutTextExp
					hr := F_VN_PutTextExp(
											sText:= 'BLUE', 
											ipDestImage:= ipImageResult, 
											nX:= TO_UDINT(stRectangle.aCenter[0] - stRectangle.stSize.fHeight/2), 
											nY:= TO_UDINT(stRectangle.aCenter[1] - stRectangle.stSize.fHeight/2), 
											eFontType:= ETcVnFontType.TCVN_FT_HERSHEY_COMPLEX, 
											fFontScale:= 5, 
											aColor:= aColorRed, 
											nThickness:= 5, 
											eLineType:= ETcVnLineType.TCVN_LT_4_CONNECTED, 
											bBottomLeftOrigin:= FALSE, 
											hrPrev:= hr);
					
				END_IF
				
			END_WHILE

//////-----------------------------

			//// DrawContours
//			hr := F_VN_DrawContours(
//									ipContours:= ipContours, 
//									nContourIndex:= -1, 
//									ipDestImage:= ipImageResult, 
//									aColor:= aColorRed, 
//									nThickness:= 5, 
//									hrPrev:= hr);
			
			// Debug ** copy need time & memory & just 1 side can access the image | transform: save time
			//hr := F_VN_CopyIntoDisplayableImage(ipSrcImage:= ipImageResult, ipDestImage:= ipImageResultDispl, hrPrev:= hr);
			hr := F_VN_TransformIntoDisplayableImageExp(ipSrcImage:= ipImageResult, ipDestImage:= ipImageResultDispl, bAllowDeepCopy:= TRUE, hrPrev:= hr);
									
		END_IF
		

	TCVN_CS_ERROR: 	(* The camera controller is in an error state (e.g. the connection to the camera was lost). *)
		fbControl.Reset();
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="VISION">
      <LineId Id="524" Count="23" />
      <LineId Id="693" Count="115" />
      <LineId Id="608" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>